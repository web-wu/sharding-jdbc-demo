spring.shardingsphere.props.sql.show=true

spring.shardingsphere.datasource.names=ds1,ds2

# 数据源
spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.url=jdbc:mysql://localhost:3306/db1?characterEncoding=utf-8&serverTimezone=UTC
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=innosen

spring.shardingsphere.datasource.ds2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds2.url=jdbc:mysql://localhost:3306/db2?characterEncoding=utf-8&serverTimezone=UTC
spring.shardingsphere.datasource.ds2.username=root
spring.shardingsphere.datasource.ds2.password=innosen

# 数据实际节点
spring.shardingsphere.sharding.tables.user.actual-data-nodes=ds$->{1..2}.user_$->{1..2}

spring.shardingsphere.sharding.tables.user.key-generator.column=uid
spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE

##########--------- 分库配置 ---------#############

#1 inline 行表达式 库 分片策略
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=uid
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{uid % 2 + 1}

#2 standard 标准 库 分片策略
#spring.shardingsphere.sharding.default-database-strategy.standard.sharding-column=uid
#spring.shardingsphere.sharding.default-database-strategy.standard.precise-algorithm-class-name=com.tabwu.sdjc.algorithm.database.MyDatabaseStandardPreciseAlgorithm
#spring.shardingsphere.sharding.default-database-strategy.standard.range-algorithm-class-name=com.tabwu.sdjc.algorithm.database.MyDatabaseStandardRangeAlgorithm

#3 complex 复合 库 分片策略
#spring.shardingsphere.sharding.default-database-strategy.complex.sharding-columns=uid,age
#spring.shardingsphere.sharding.default-database-strategy.complex.algorithm-class-name=com.tabwu.sdjc.algorithm.database.MyDatabaseComplexAlgorithm

#4 hint 强制 库 分片策略
#spring.shardingsphere.sharding.default-database-strategy.hint.algorithm-class-name=com.tabwu.sdjc.algorithm.database.MyDatabaseHintAlgorithm

##########--------- 分表配置 ---------#############

#1 inline 行表达式 表 分片策略
spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=uid
spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{uid % 2 + 1}

#2 standard 标准 表 分片策略
#spring.shardingsphere.sharding.tables.user.table-strategy.standard.sharding-column=uid
#spring.shardingsphere.sharding.tables.user.table-strategy.standard.precise-algorithm-class-name=com.tabwu.sdjc.algorithm.table.MyTableStandardPreciseAlgorithm
#spring.shardingsphere.sharding.tables.user.table-strategy.standard.range-algorithm-class-name=com.tabwu.sdjc.algorithm.table.MyTableStandardRangeAlgorithm

#3 complex 复合 表 分片策略
#spring.shardingsphere.sharding.tables.user.table-strategy.complex.sharding-columns=uid,age
#spring.shardingsphere.sharding.tables.user.table-strategy.complex.algorithm-class-name=com.tabwu.sdjc.algorithm.table.MyTableComplexAlgorithm

#4 hint 强制 表 分片策略
#spring.shardingsphere.sharding.tables.user.table-strategy.hint.algorithm-class-name=com.tabwu.sdjc.algorithm.table.MyTableHintAlgorithm


##########--------- 绑定表 与 广播表 ---------#############
#1 绑定表作用：多表关联查询时会出现笛卡尔积现象，绑定表可以消除笛卡尔积现象，消除多余的查询
#spring.shardingsphere.sharding.binding-tables=关联查询的表名tableName1,关联查询的表名tableName2

#2 广播表作用：有一些表是不需要分库分表的，所有每个库中都需要有，需要全量同步，广播表可以做到数据同步，插入时向全部表插入数据，查询时只需要向其中一个库获取
spring.shardingsphere.sharding.broadcast-tables[0]=test